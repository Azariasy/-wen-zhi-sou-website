// api/create-order.js\n// 接收前端的POST请求，包含用户信息（邮箱）和购买的产品信息。\n// 调用易支付平台API，创建支付订单。\n// 将支付订单信息（如支付URL、订单号）返回给前端。\n// 将内部订单信息存储到数据库，状态为 \'PENDING\'。\n\n// 示例: 使用 Node.js (Vercel Serverless Function)\n\n// 确保您已安装 axios: npm install axios 或 yarn add axios\nimport clientPromise from '../lib/mongodb'; // 导入数据库连接\nconst axios = require('axios'); // 用于发送 HTTP 请求\nconst crypto = require('crypto'); // 用于 MD5 签名\n\n// --- 易支付配置 (从环境变量读取) --- \nconst YIPAY_PID = process.env.PAYMENT_YIPAY_PID; // 您的商户ID (例如: 14402)\nconst YIPAY_MD5_KEY = process.env.PAYMENT_YIPAY_MD5_KEY; // 您的 MD5 密钥 (非常重要!)\nconst YIPAY_API_BASE_URL = process.env.PAYMENT_YIPAY_API_URL || 'https://pay.myczfw.com/'; // 您的易支付接口地址\n// 确定提交订单的端点 (通常是 submit.php 或 mapi.php，请查阅文档)\nconst YIPAY_SUBMIT_ENDPOINT = '/submit.php'; // **<-- 请根据您的易支付文档确认此路径**\n// ----------------------------------- \n\n// MD5签名函数 (适用于常见易支付系统)\nfunction generateYiPayMD5Sign(params, key) {\n  // 1. 过滤空值和签名参数\n  const filteredParams = Object.keys(params)\n    .filter(k => params[k] !== '' && params[k] !== null && k !== 'sign' && k !== 'sign_type')\n    .sort() // 2. 参数名ASCII字典序排序\n    .map(k => `${k}=${params[k]}`); // 3. 拼接成 key=value 格式\n\n  // 4. 拼接密钥\n  const stringToSign = filteredParams.join('&') + key;\n\n  // 5. 计算 MD5 哈希 (小写)\n  return crypto.createHash('md5').update(stringToSign).digest('hex');\n}\n\nconst allowedOrigin = 'https://azariasy.github.io';\n\nmodule.exports = async (req, res) => {\n  // Set CORS headers\n  res.setHeader('Access-Control-Allow-Origin', allowedOrigin);\n  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n\n  // Handle OPTIONS preflight request\n  if (req.method === 'OPTIONS') {\n    return res.status(200).end();\n  }\n\n  // 只允许 POST 请求 (OPTIONS请求已在上面处理)\n  if (req.method !== 'POST') {\n    return res.status(405).json({ error: 'Method Not Allowed', message: 'Only POST requests are accepted.' });\n  }\n\n  // 检查环境变量是否配置\n  if (!YIPAY_PID || !YIPAY_MD5_KEY) {\n    console.error('YiPay PID or MD5 Key not configured.');\n    return res.status(500).json({ success: false, error: 'Server Configuration Error' });\n  }\n\n  try {\n    const { email, productId, price, paymentMethod } = req.body;\n\n    // 基本验证\n    if (!email || !productId || !price || !paymentMethod) {\n      return res.status(400).json({ error: 'Bad Request', message: 'Missing required fields.' });\n    }\n\n    // 验证支付方式是否支持 (根据易支付文档调整)\n    const supportedMethods = ['alipay', 'wxpay', 'qqpay']; // 示例\n    if (!supportedMethods.includes(paymentMethod)) {\n      return res.status(400).json({ error: 'Bad Request', message: `Unsupported payment method: ${paymentMethod}` });\n    }\n\n    console.log('Received order creation request:', req.body);\n\n    // 1. 生成内部唯一订单号 (示例)\n    const internalOrderNo = `WZS-${Date.now()}-${Math.random().toString(36).substr(2, 9).toUpperCase()}`;\n    console.log(`Generated internal order number: ${internalOrderNo}`);\n\n    // 2. 准备调用易支付 API 的参数 (参考易支付文档调整参数名)\n    const params = {\n      pid: YIPAY_PID,\n      type: paymentMethod,\n      out_trade_no: internalOrderNo,\n      notify_url: `${process.env.VERCEL_URL || 'https://' + req.headers.host}/api/payment-callback`,\n      return_url: `${req.headers.origin}/purchase-success.html?orderNo=${internalOrderNo}`, // req.headers.origin here might be problematic with CORS if not from allowedOrigin\n      name: `文智搜专业版 - ${productId}`,\n      money: parseFloat(price).toFixed(2),\n      sign_type: 'MD5',\n    };\n    
    // For return_url, it's safer to use the explicitly allowed origin\n    if (req.headers.origin === allowedOrigin) {\n        params.return_url = `${allowedOrigin}/purchase-success.html?orderNo=${internalOrderNo}`;\n    } else {\n        // Fallback or error if the origin is not the expected one, \n        // or use a default configured return URL.\n        // For now, let's stick to the allowedOrigin if it matches.\n        // If your purchase-success.html is hosted on the same domain as the API (Vercel), \n        // then req.headers.origin might be okay, but github.io is different.\n        // Consider a fixed, known URL for purchase-success.html hosted on github.io\n         params.return_url = `https://azariasy.github.io/purchase-success.html?orderNo=${internalOrderNo}`;\n    }\n\n    // 3. 生成签名\n    params.sign = generateYiPayMD5Sign(params, YIPAY_MD5_KEY);\n    console.log('Parameters for YiPay:', params);\n\n    // 4. 构造支付网关 URL (易支付通常是 GET 请求跳转或 POST 表单提交)\n    //    对于 GET 跳转方式:\n    const paymentUrl = `${YIPAY_API_BASE_URL.replace(/\/$/, '')}${YIPAY_SUBMIT_ENDPOINT}?${new URLSearchParams(params).toString()}`;\n    console.log('Generated Payment URL:', paymentUrl);\n\n    // **注意**: 某些易支付系统可能需要通过 POST 表单自动提交，前端逻辑需要相应调整\n    // 如果是 POST 提交，这里应该返回 params 对象给前端，让前端构建表单并提交。\n\n    // 5. 在您的数据库中存储订单信息 (状态: PENDING)\n    //    需要您实现数据库交互逻辑\n    try {\n      const client = await clientPromise; // 等待数据库连接\n      const db = client.db("wenzhisouDB"); // 指定数据库名称，例如 'wenzhisouDB'\n      const ordersCollection = db.collection("orders"); // 指定集合名称，例如 'orders'\n\n      const orderDocument = {\n        internalOrderNo,\n        platformOrderId: null, // 平台订单号将在回调中更新\n        email,\n        productId,\n        price: parseFloat(price),\n        paymentMethod,\n        status: 'PENDING',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      const insertResult = await ordersCollection.insertOne(orderDocument);\n      console.log(`Stored pending order ${internalOrderNo} to database. Inserted ID: ${insertResult.insertedId}`);\n\n    } catch (dbError) {\n      console.error(`Failed to store order ${internalOrderNo} to DB:`, dbError);\n      // 重要：即使数据库写入失败，我们仍然应该尝试让用户完成支付\n      // 记录错误，后续可能需要人工核对\n      // 但不能直接返回 500 错误给前端，否则用户无法支付\n    }\n\n    // 6. 返回成功响应和支付 URL 给前端 (适用于 GET 跳转方式)\n    res.status(200).json({\n      success: true,\n      orderNo: internalOrderNo,\n      paymentUrl: paymentUrl,\n      // 如果是 POST 提交，则返回 params: params\n    });\n\n  } catch (error) {\n    console.error('Error in /api/create-order:', error);\n    res.status(500).json({ success: false, error: 'Internal Server Error', details: error.message });\n  }\n};\n\n// --- 数据库存储辅助函数占位符 (需要您实现) --- \n// async function storeOrderInDB(orderData) {\n//   // ... 实现数据库存储逻辑 ...\n// }\n 